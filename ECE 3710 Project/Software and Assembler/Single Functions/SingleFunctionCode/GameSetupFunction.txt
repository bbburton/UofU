// Move in the address that contains the first memory matrix element to reg 15
LUI 15, $237
// Load maximum player position into reg 5
LUI 5, $75
// Load grid width (160) into reg 6
MVI 6, $160
// Load the player one start position bottom middle left (19080) into reg 8
LUI 8, $74
ORI 8, $136
// Start Player one moving up by moving 0 into reg 9
MVI 9, $0
// Load the player two start position bottom middle right (19160) into reg 10
LUI 10, $74
ORI 10, $216
// Start Player two moving up by moving 0 into reg 11
MVI 11, $0
// Move the strating grid address in memory to reg 0
MV 0, 15
// Move the one past the ending grid address in memory to reg 1
MV 1, 5
RSH 1, 3
ADD 1, 0
// Move 0 (the address to store at every grid) into reg 2
MVI 2, $0
// Load 0 into the memory address
LOAD 2, 0
// Increment the memory address
ADDI 0, $1
// Keep looping and storing 0 until every matrix address has been assigned 0
CMP 0, 1
JNE $253
// Load the player 1 marker (1) into the matrix at the players starting position
// Starts at position (19080) which is bits 0, 1 of memory (startaddr + 2385)
MVI 1, $1
LUI 0, $9
ORI 0, $81
ADD 0, 15
STOR 1, 0
// Load the player 2 marker (2) into the matrix at the players starting position
// Starts at position (19160) which is bits 0, 1 of memory (startaddr + 2395)
MVI 2, $2
LUI 0, $9
ORI 0, $91
ADD 0, 15
STOR 1, 0
// Jump to begin the game loop
JUC GameLoop

